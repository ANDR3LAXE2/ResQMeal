https://serratus.github.io/quaggaJS/  => bibliothèque JS pour lire les codes barres


TODO:
- permettre à l'utilisateur d'entrer le code barre depuis la page web
- permettre à l'utilisateur de scanner un produit

- stocker les données de l'utilisateur (MySql, nodeJS)
- récupérer des recettes
- frontend
- proposer recette en fonction des aliments de l'utilisateur


GUIDE POUR LES NOOBS

- télécharger node 
- aller dans le dossier de votre projet sur VSCODE et ouvrir un terminal
- faire "npm install" dans le terminal si ça marche pas "npm install cors dotenv express mysql2 nodemon"
- aller sur mysql workbench et copier coller le code suivant dans une nouvelle base de donnée nommée "resqmeal_db":
CREATE TABLE Ingrédients(
   id_aliment INT auto_increment,
   nom_aliment VARCHAR(50),
   PRIMARY KEY(id_aliment)
);

CREATE TABLE Recettes(
   id_recette INT auto_increment,
   nom_recette VARCHAR(50),
   description_recette text,
   PRIMARY KEY(id_recette)
);

CREATE TABLE Contient(
   id_aliment INT,
   id_recette INT,
   PRIMARY KEY(id_aliment, id_recette),
   FOREIGN KEY(id_aliment) REFERENCES Ingrédients(id_aliment),
   FOREIGN KEY(id_recette) REFERENCES Recettes(id_recette)
);

-- Insérer les ingrédients
INSERT INTO Ingrédients (nom_aliment)
VALUES
   ('Flour'),
   ('Sugar'),
   ('Butter'),
   ('Eggs'),
   ('Milk'),
   ('Salt'),
   ('Yeast'),
   ('Apples'),
   ('Cinnamon'),
   ('Chocolatee'),
   ('Almonds'),
   ('Vanilla'),
   ('Coconut'),
   ('Pepper'),
   ('Onion');

-- Insérer les recettes
INSERT INTO Recettes (nom_recette, description_recette)
VALUES
   ('Banana Bread', 'A moist, sweet bread made with ripe bananas, flour, sugar, and eggs. Often enjoyed as a breakfast item or snack, it can include nuts or chocolate chips for added flavor.'),
   ('Apple Pie', 'A classic dessert featuring a buttery crust filled with a spiced mixture of sliced apples, sugar, and cinnamon. It’s typically baked until golden brown and often served with vanilla ice cream.'),
   ('Chocolate Chip Cookies', 'Soft or crispy cookies loaded with chocolate chips. Made from a dough of flour, sugar, butter, and eggs, they’re a favorite treat for their sweet, chocolatey goodness.'),
   ('Quiche Lorraine', "A savory French tart filled with a rich custard made from eggs and cream, studded with bacon or lardons, and Gruyère cheese. It's baked in a flaky pastry crust and enjoyed warm or at room temperature."),
   ('Yogurt Cake', 'A simple and light French cake made with yogurt, which keeps it moist. The basic ingredients include yogurt, flour, sugar, and eggs, making it easy to prepare. It’s often flavored with vanilla or lemon.'),
   ('Crêpes', 'Thin, delicate French pancakes made from a simple batter of flour, milk, and eggs. They can be filled with sweet or savory ingredients like Nutella, ham, or cheese, and are rolled or folded before serving.'),
   ('Brownies', 'Rich, dense chocolate squares that are fudgy or cakey, depending on the recipe. Made with cocoa powder or melted chocolate, sugar, and butter, they are a favorite dessert or snack.'),
   ('Caesar Salad', 'A popular salad consisting of romaine lettuce, croutons, and Parmesan cheese, all tossed in a creamy Caesar dressing that includes anchovies, garlic, lemon juice, and olive oil. Often topped with grilled chicken.'),
   ('Mushroom Risotto', 'A creamy Italian rice dish made with Arborio rice, slowly cooked in broth until tender. It’s enriched with sautéed mushrooms, onions, garlic, white wine, and Parmesan cheese, creating a rich, comforting meal.'),
   ('French Onion Soup', 'A hearty soup made by slowly caramelizing onions, then simmering them in beef broth and white wine. It’s typically topped with toasted bread and melted Gruyère or Swiss cheese, creating a satisfying and flavorful dish.');

SELECT * FROM Recettes;
SELECT * FROM Ingrédients;

-- Associer les ingrédients aux recettes
INSERT INTO Contient (id_aliment, id_recette)
VALUES
   -- Pain aux bananes
   (1, 1), (2, 1), (3, 1), (4, 1), (8, 1),
   -- Tarte aux pommes
   (1, 2), (2, 2), (3, 2), (8, 2), (9, 2),
   -- Cookies au chocolat
   (1, 3), (2, 3), (3, 3), (4, 3), (10, 3),
   -- Quiche lorraine
   (1, 4), (4, 4), (5, 4), (6, 4), (15, 4),
   -- Gâteau au yaourt
   (1, 5), (2, 5), (3, 5), (4, 5), (11, 5),
   -- Crêpes
   (1, 6), (4, 6), (5, 6), (3, 6), (2, 6),
   -- Brownies
   (1, 7), (2, 7), (3, 7), (4, 7), (10, 7),
   -- Salade César
   (5, 8), (12, 8), (13, 8), (14, 8), (3, 8),
   -- Risotto aux champignons
   (1, 9), (11, 9), (5, 9), (15, 9), (14, 9),
   -- Soupe à l'oignon
   (15, 10), (5, 10), (3, 10), (7, 10), (14, 10);
   

SELECT * FROM Recettes;
- créer un fichier nommé ".env" et le remplire de la manière suivante:
# .env file
DB_HOST=localhost
DB_USER=root
DB_PASS=    //Mettre votre mot de passe collé à l'espace
DB_NAME=resqmeal_db
- dans votre terminal tappez "npm start"
- faire golive en bas de votre fenetre si vous avez live server (si vous l'avez pas télécharger le ou sinon lancez votre page en local dans votre navigateur)
- normalement c'est good vous voyez la pomme et la poire s'afficher en bas de votre page

EXPLICATIONS:

const app = express();
on créé notre serveur en local

const connection = mysql.createConnection({
  host: process.env.DB_HOST,
  user: process.env.DB_USER,
  password: process.env.DB_PASS,
  database: process.env.DB_NAME,
});
on se connecte à notre base de donnée mysql

app.get("/ingredients", (req, res) => {
  connection.query("SELECT * FROM Ingrédients", (err, rows) => {
    if (err) {
      console.error(
        "Erreur lors de la récupération des données des aliments :",
        err
      );
      res.status(500).send("Erreur lors de la récupération des données");
      return;
    }
    res.send(rows);
  });
});
on récupère nos données sql sous forme de tableaux dans notre API (qu'on a créé avec le code) sur la route http://localhost:3000/Ingrédients
et on le print le json grâce à la fonction fetch qui nous permets de faire des requêtes depuis le frontend sur notre serveur

fetch("http://localhost:3000/ingredients")
        .then((response) => response.json())
        .then((data) => {
          document.getElementById("ingredients").innerText =
            JSON.stringify(data);
        })
        .catch((error) => console.error("Erreur:", error));

et ça ça permets de vérifier que votre serveur marche bien normalement dans votre terminal y'a marque Server is running at http://localhost:3000
app.listen(3000, () => {
  console.log("Server is running at http://localhost:3000");
});
